package main

import (
	"fmt"
	"io/ioutil"
	"reflect"
	"time"

	"github.com/superp00t/etc/yo"
	"github.com/superp00t/gophercraft/datapack"
	"github.com/superp00t/gophercraft/datapack/text"
	"github.com/superp00t/gophercraft/format/dbc"
	"github.com/superp00t/gophercraft/gcore"
)

func getDBC(name string) *dbc.DBC {
	bts, err := wizGamePool.ReadFile(name)
	if err != nil {
		yo.Fatal(name, err)
	}

	dd, err := dbc.Parse(wizGamePool.Build(), bts)
	if err != nil {
		yo.Fatal(name, err)
	}

	return dd
}

func extractDBC(path, to string, sli interface{}) {
	path = "DBFilesClient\\" + path + ".dbc" // TODO: replace extension depending on version

	db := getDBC(path)

	if err := db.ParseRecords(sli); err != nil {
		fmt.Println(path)
		panic(err)
	}

	slice := reflect.TypeOf(sli).Elem()

	switch slice.Kind() {
	case reflect.Slice:
		s := reflect.ValueOf(sli).Elem()

		file, err := wizPack.WriteFile(to)
		if err != nil {
			panic(err)
		}

		file.Write([]byte("// DO NOT EDIT OR DISTRIBUTE: generated by gcraft_wizard on " + time.Now().Format("Mon Jan 2 15:04:05 MST 2006") + "\r\n"))

		for i := 0; i < s.Len(); i++ {
			enc := text.NewEncoder(file)

			if err := enc.Encode(s.Index(i).Interface()); err != nil {
				panic(err)
			}
		}

		file.Close()
	}
}

func copyFile(in string, out string) {
	b, err := ioutil.ReadFile(in)
	if err != nil {
		panic(err)
	}

	wizPack.WriteBytes(out, b)
}

func generateDatapack(dPack string) {
	fmt.Println("generating...")
	var err error
	// Open pack folder in temp
	wizPack, err = datapack.Author(datapack.PackConfig{
		Name:        "Base",
		Description: "Gophercraft Base Content Pack",
		Author:      "DO NOT EDIT OR DISTRIBUTE: generated by gcraft_wizard on " + time.Now().String(),
		Version:     gcore.Version,
		Depends: []string{
			"@gophercraft>=" + gcore.Version,
			"@gameVersion==" + fmt.Sprintf("%d", wizGamePool.Build())},
	})
	fmt.Println("Authored")

	if err != nil {
		yo.Fatal(err)
	}

	fmt.Println("Authored")

	var cso []dbc.Ent_CharStartOutfit
	extractDBC("CharStartOutfit", "DB/DBC_CharStartOutfit.txt", &cso)

	var emotesText []dbc.Ent_EmotesText
	extractDBC("EmotesText", "DB/DBC_EmotesText.txt", &emotesText)

	var emotes []dbc.Ent_Emotes
	extractDBC("Emotes", "DB/DBC_Emotes.txt", &emotes)

	var races []dbc.Ent_ChrRaces
	extractDBC("ChrRaces", "DB/DBC_ChrRaces.txt", &races)

	var classes []dbc.Ent_ChrClasses
	extractDBC("ChrClasses", "DB/DBC_ChrClasses.txt", &classes)

	var areaTrigger []dbc.Ent_AreaTrigger
	extractDBC("AreaTrigger", "DB/DBC_AreaTrigger.txt", &areaTrigger)

	// var emotesTextData []dbc.Ent_EmotesTextData
	// extractDBC("EmotesTextData", "DB/DBC_EmotesTextData.json", &emotesTextData)

	fmt.Println("Generating", dPack, "...")

	if err := wizPack.ZipToFile(dPack); err != nil {
		panic(err)
	}

	wizPack.Delete()
}
